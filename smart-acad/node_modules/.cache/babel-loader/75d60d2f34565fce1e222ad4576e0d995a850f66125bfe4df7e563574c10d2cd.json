{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nconst AlternadorDeTema = () => {\n  _s();\n  /*  \r\n  Para garantir que o código é executado apenas uma vez \r\n  quando o componente for montado, usamos o useEffect\r\n  useEffect(() => {   }, []);\r\n    */\n  useEffect(() => {\n    /* \r\n      Essas duas funções servem para guardar e recuperar o tema escolhido (por exemplo, 'dark' ou 'light')\r\n      no armazenamento do navegador (localStorage). Assim, quando a pessoa voltar ao site, ele lembra da escolha.\r\n    */\n    const obterTemaArmazenado = () => localStorage.getItem('theme');\n    const definirTemaArmazenado = tema => localStorage.setItem('theme', tema);\n\n    /* \r\n      Aqui a gente verifica qual tema deve ser usado:\r\n      - Primeiro, olha se já existe um tema salvo.\r\n      - Se existir, ele usa esse tema.\r\n      - Se não, ele escolhe de acordo com a configuração do sistema: \r\n        se o computador estiver em modo escuro, usa 'dark'; caso contrário, 'light'.\r\n    */\n    const obterTemaPreferido = () => {\n      const temaArmazenado = obterTemaArmazenado();\n      if (temaArmazenado) return temaArmazenado;\n      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    };\n\n    /* \r\n      Essa função aplica o tema escolhido na página.\r\n      Ela coloca um atributo no elemento principal (document.documentElement) para que os estilos do Bootstrap\r\n      possam mudar o visual da página de acordo com o tema (escuro ou claro).\r\n      Se o tema for 'auto', ela escolhe automaticamente o tema baseado na configuração do sistema.\r\n    */\n    const definirTema = tema => {\n      if (tema === 'auto') {\n        document.documentElement.setAttribute('data-bs-theme', window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\n      } else {\n        document.documentElement.setAttribute('data-bs-theme', tema);\n      }\n    };\n\n    /* \r\n    Aqui, logo que a página carrega, o tema é definido conforme a preferência do usuário ou do sistema.\r\n    */\n    definirTema(obterTemaPreferido());\n\n    /* \r\n      Essa função atualiza o visual do botão que mostra qual tema está ativo.\r\n      Ela faz o seguinte:\r\n      1- Procura pelo botão que controla o tema (usando o ID #bd-theme).\r\n      2- Atualiza o texto e o ícone para mostrar o tema escolhido.\r\n      3- Remove a marcação \"ativo\" dos outros botões e marca somente o botão clicado.\r\n    */\n    const mostrarTemaAtivo = (tema, foco = false) => {\n      const alternadorTema = document.querySelector('#bd-theme');\n      if (!alternadorTema) return;\n      const textoAlternador = document.querySelector('#bd-theme-text');\n      const iconeTemaAtivo = document.querySelector('.theme-icon-active use');\n      const botaoAtivo = document.querySelector(`[data-bs-theme-value=\"${tema}\"]`);\n      const svgDoBotaoAtivo = botaoAtivo.querySelector('svg use').getAttribute('href');\n\n      /* \r\n      Remove a marcação \"active\" de todos os botões de tema\r\n      */\n      document.querySelectorAll('[data-bs-theme-value]').forEach(elemento => {\n        elemento.classList.remove('active');\n        elemento.setAttribute('aria-pressed', 'false');\n      });\n\n      /* \r\n      Marca o botão clicado como ativo e atualiza o ícone\r\n      */\n      botaoAtivo.classList.add('active');\n      botaoAtivo.setAttribute('aria-pressed', 'true');\n      iconeTemaAtivo.setAttribute('href', svgDoBotaoAtivo);\n\n      /* \r\n      Atualiza o rótulo do alternador com o nome do tema ativo\r\n      */\n      const labelAlternador = `${textoAlternador.textContent} (${botaoAtivo.dataset.bsThemeValue})`;\n      alternadorTema.setAttribute('aria-label', labelAlternador);\n\n      /* Se o parâmetro 'foco' for verdadeiro, coloca o foco no botão do alternador\r\n      */\n      if (foco) {\n        alternadorTema.focus();\n      }\n    };\n\n    /* \r\n      Aqui configuramos para que o site fique de olho na configuração do sistema.\r\n      Se o computador mudar de modo claro para escuro (ou vice-versa) e o usuário \r\n      não tiver escolhido um tema específico,\r\n      o tema do site muda automaticamente.\r\n    */\n    const consultaMedia = window.matchMedia('(prefers-color-scheme: dark)');\n    const manipuladorConsultaMedia = () => {\n      const temaArmazenado = obterTemaArmazenado();\n      if (temaArmazenado !== 'light' && temaArmazenado !== 'dark') {\n        definirTema(obterTemaPreferido());\n      }\n    };\n    consultaMedia.addEventListener('change', manipuladorConsultaMedia);\n\n    /* \r\n      Esse bloco seleciona todos os botões que podem alterar\r\n      o tema (eles têm um atributo especial 'data-bs-theme-value')\r\n      e adiciona um \"ouvinte\" para escutar o clique. Quando o botão é clicado:\r\n      1- A escolha do tema é salva.\r\n      2- O tema é aplicado na página.\r\n      3- O botão é atualizado para mostrar que está ativo.\r\n    */\n    const alternadores = document.querySelectorAll('[data-bs-theme-value]');\n    const manipuladorClique = function () {\n      const tema = this.getAttribute('data-bs-theme-value');\n      definirTemaArmazenado(tema);\n      definirTema(tema);\n      mostrarTemaAtivo(tema, true);\n    };\n    alternadores.forEach(alternador => {\n      alternador.addEventListener('click', manipuladorClique);\n    });\n\n    /* Atualiza o botão do tema ativo logo que a página carrega, \r\n    para mostrar o tema que está em uso.\r\n    */\n    mostrarTemaAtivo(obterTemaPreferido());\n\n    /* \r\n      Quando o componente for removido da tela, essa função remove os \"ouvintes\" (event listeners)\r\n      para evitar que fiquem rodando em segundo plano e causando problemas.\r\n    */\n    return () => {\n      consultaMedia.removeEventListener('change', manipuladorConsultaMedia);\n      alternadores.forEach(alternador => {\n        alternador.removeEventListener('click', manipuladorClique);\n      });\n    };\n  }, []);\n\n  /* Esse componente não renderiza nada na tela, \r\n  ele só executa os scripts para alternar o tema.\r\n  */\n  return null;\n};\n_s(AlternadorDeTema, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = AlternadorDeTema;\nexport default AlternadorDeTema;\nvar _c;\n$RefreshReg$(_c, \"AlternadorDeTema\");","map":{"version":3,"names":["useEffect","AlternadorDeTema","_s","obterTemaArmazenado","localStorage","getItem","definirTemaArmazenado","tema","setItem","obterTemaPreferido","temaArmazenado","window","matchMedia","matches","definirTema","document","documentElement","setAttribute","mostrarTemaAtivo","foco","alternadorTema","querySelector","textoAlternador","iconeTemaAtivo","botaoAtivo","svgDoBotaoAtivo","getAttribute","querySelectorAll","forEach","elemento","classList","remove","add","labelAlternador","textContent","dataset","bsThemeValue","focus","consultaMedia","manipuladorConsultaMedia","addEventListener","alternadores","manipuladorClique","alternador","removeEventListener","_c","$RefreshReg$"],"sources":["C:/Users/2DTG/Desktop/SmartAcad/smart-acad/src/components/AlternadorDeTema.jsx"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nconst AlternadorDeTema = () => {\r\n  \r\n    /*  \r\n    Para garantir que o código é executado apenas uma vez \r\n    quando o componente for montado, usamos o useEffect\r\n    useEffect(() => {   }, []);\r\n\r\n    */\r\n  useEffect(() => {\r\n    /* \r\n      Essas duas funções servem para guardar e recuperar o tema escolhido (por exemplo, 'dark' ou 'light')\r\n      no armazenamento do navegador (localStorage). Assim, quando a pessoa voltar ao site, ele lembra da escolha.\r\n    */\r\n    const obterTemaArmazenado = () => localStorage.getItem('theme');\r\n    const definirTemaArmazenado = (tema) => localStorage.setItem('theme', tema);\r\n\r\n    /* \r\n      Aqui a gente verifica qual tema deve ser usado:\r\n      - Primeiro, olha se já existe um tema salvo.\r\n      - Se existir, ele usa esse tema.\r\n      - Se não, ele escolhe de acordo com a configuração do sistema: \r\n        se o computador estiver em modo escuro, usa 'dark'; caso contrário, 'light'.\r\n    */\r\n    const obterTemaPreferido = () => {\r\n      const temaArmazenado = obterTemaArmazenado();\r\n      if (temaArmazenado) return temaArmazenado;\r\n      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n    };\r\n\r\n    /* \r\n      Essa função aplica o tema escolhido na página.\r\n      Ela coloca um atributo no elemento principal (document.documentElement) para que os estilos do Bootstrap\r\n      possam mudar o visual da página de acordo com o tema (escuro ou claro).\r\n      Se o tema for 'auto', ela escolhe automaticamente o tema baseado na configuração do sistema.\r\n    */\r\n    const definirTema = (tema) => {\r\n      if (tema === 'auto') {\r\n        document.documentElement.setAttribute(\r\n          'data-bs-theme',\r\n          window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\r\n        );\r\n      } else {\r\n        document.documentElement.setAttribute('data-bs-theme', tema);\r\n      }\r\n    };\r\n\r\n    /* \r\n    Aqui, logo que a página carrega, o tema é definido conforme a preferência do usuário ou do sistema.\r\n    */\r\n    definirTema(obterTemaPreferido());\r\n\r\n    /* \r\n      Essa função atualiza o visual do botão que mostra qual tema está ativo.\r\n      Ela faz o seguinte:\r\n      1- Procura pelo botão que controla o tema (usando o ID #bd-theme).\r\n      2- Atualiza o texto e o ícone para mostrar o tema escolhido.\r\n      3- Remove a marcação \"ativo\" dos outros botões e marca somente o botão clicado.\r\n    */\r\n    const mostrarTemaAtivo = (tema, foco = false) => {\r\n      const alternadorTema = document.querySelector('#bd-theme');\r\n      if (!alternadorTema) return;\r\n\r\n      const textoAlternador = document.querySelector('#bd-theme-text');\r\n      const iconeTemaAtivo = document.querySelector('.theme-icon-active use');\r\n      const botaoAtivo = document.querySelector(`[data-bs-theme-value=\"${tema}\"]`);\r\n      const svgDoBotaoAtivo = botaoAtivo.querySelector('svg use').getAttribute('href');\r\n\r\n      /* \r\n      Remove a marcação \"active\" de todos os botões de tema\r\n      */\r\n      document.querySelectorAll('[data-bs-theme-value]').forEach((elemento) => {\r\n        elemento.classList.remove('active');\r\n        elemento.setAttribute('aria-pressed', 'false');\r\n      });\r\n\r\n      /* \r\n      Marca o botão clicado como ativo e atualiza o ícone\r\n      */\r\n      botaoAtivo.classList.add('active');\r\n      botaoAtivo.setAttribute('aria-pressed', 'true');\r\n      iconeTemaAtivo.setAttribute('href', svgDoBotaoAtivo);\r\n\r\n      /* \r\n      Atualiza o rótulo do alternador com o nome do tema ativo\r\n      */\r\n      const labelAlternador = `${textoAlternador.textContent} (${botaoAtivo.dataset.bsThemeValue})`;\r\n      alternadorTema.setAttribute('aria-label', labelAlternador);\r\n\r\n      /* Se o parâmetro 'foco' for verdadeiro, coloca o foco no botão do alternador\r\n      */\r\n      if (foco) {\r\n        alternadorTema.focus();\r\n      }\r\n    };\r\n\r\n    /* \r\n      Aqui configuramos para que o site fique de olho na configuração do sistema.\r\n      Se o computador mudar de modo claro para escuro (ou vice-versa) e o usuário \r\n      não tiver escolhido um tema específico,\r\n      o tema do site muda automaticamente.\r\n    */\r\n    const consultaMedia = window.matchMedia('(prefers-color-scheme: dark)');\r\n    const manipuladorConsultaMedia = () => {\r\n      const temaArmazenado = obterTemaArmazenado();\r\n      if (temaArmazenado !== 'light' && temaArmazenado !== 'dark') {\r\n        definirTema(obterTemaPreferido());\r\n      }\r\n    };\r\n    consultaMedia.addEventListener('change', manipuladorConsultaMedia);\r\n\r\n    /* \r\n      Esse bloco seleciona todos os botões que podem alterar\r\n      o tema (eles têm um atributo especial 'data-bs-theme-value')\r\n      e adiciona um \"ouvinte\" para escutar o clique. Quando o botão é clicado:\r\n      1- A escolha do tema é salva.\r\n      2- O tema é aplicado na página.\r\n      3- O botão é atualizado para mostrar que está ativo.\r\n    */\r\n    const alternadores = document.querySelectorAll('[data-bs-theme-value]');\r\n    const manipuladorClique = function () {\r\n      const tema = this.getAttribute('data-bs-theme-value');\r\n      definirTemaArmazenado(tema);\r\n      definirTema(tema);\r\n      mostrarTemaAtivo(tema, true);\r\n    };\r\n\r\n    alternadores.forEach((alternador) => {\r\n      alternador.addEventListener('click', manipuladorClique);\r\n    });\r\n\r\n    /* Atualiza o botão do tema ativo logo que a página carrega, \r\n    para mostrar o tema que está em uso.\r\n    */\r\n    mostrarTemaAtivo(obterTemaPreferido());\r\n\r\n    /* \r\n      Quando o componente for removido da tela, essa função remove os \"ouvintes\" (event listeners)\r\n      para evitar que fiquem rodando em segundo plano e causando problemas.\r\n    */\r\n    return () => {\r\n      consultaMedia.removeEventListener('change', manipuladorConsultaMedia);\r\n      alternadores.forEach((alternador) => {\r\n        alternador.removeEventListener('click', manipuladorClique);\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  /* Esse componente não renderiza nada na tela, \r\n  ele só executa os scripts para alternar o tema.\r\n  */\r\n  return null;\r\n};\r\n\r\nexport default AlternadorDeTema;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}